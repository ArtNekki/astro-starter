name: Build and Deploy

on:
  push:
    branches:
      - develop
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - develop

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/${{ vars.PROJECT_NAME }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/develop' && 'staging' || 'production' }}
    env:
      NODE_ENV: ${{ github.ref == 'refs/heads/develop' && 'staging' || 'production' }}
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get the version
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "NODE_ENV=production" >> $GITHUB_ENV
          else
            echo "VERSION=$(git describe --tags --always)-dev-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
            echo "NODE_ENV=staging" >> $GITHUB_ENV
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ steps.get_version.outputs.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.DOCKER_IMAGE }}:${{ steps.get_version.outputs.VERSION }}
          build-args: |
            NODE_ENV=${{ env.NODE_ENV }}
            DOPPLER_CONFIG=${{ secrets.DOPPLER_CONFIG }}
            STRAPI_URL=${{ secrets.STRAPI_URL }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/develop' && 'staging' || 'production' }}
    env:
      NODE_ENV: ${{ github.ref == 'refs/heads/develop' && 'staging' || 'production' }}
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            docker pull ${{ env.DOCKER_IMAGE }}:${{ needs.build-and-push.outputs.version }}
            docker stop ${{ vars.PROJECT_NAME }} || true
            docker rm ${{ vars.PROJECT_NAME }} || true
            docker run -d \
              --name ${{ vars.PROJECT_NAME }} \
              -p ${{ vars.SSH_PORT }}:80 \
              --restart unless-stopped \
              -e NODE_ENV=${{ env.NODE_ENV }} \
              -e DOPPLER_CONFIG=${{ secrets.DOPPLER_CONFIG }} \
              -e STRAPI_URL=${{ secrets.STRAPI_URL }} \
              ${{ env.DOCKER_IMAGE }}:${{ needs.build-and-push.outputs.version }}

            # Remove old Docker images
            docker image prune -af
